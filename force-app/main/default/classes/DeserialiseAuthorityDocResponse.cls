//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class DeserialiseAuthorityDocResponse {

	public class Sentence_Y {
		public Boolean live {get;set;}
		public String time_created {get;set;}
		public String date_added {get;set;}
		public String time_updated {get;set;}
		public String date_modified {get;set;}
		public String sentence {get;set;}
		public Boolean correct {get;set;}
		public Integer id {get;set;}
		public List<Tagged_phrases_Z> tagged_phrases {get;set;}
		public Integer check_digit {get;set;}
		public String language {get;set;}
		public String license_info {get;set;}

		public Sentence_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'live') {
							live = parser.getBooleanValue();
						} else if (text == 'time_created') {
							time_created = parser.getText();
						} else if (text == 'date_added') {
							date_added = parser.getText();
						} else if (text == 'time_updated') {
							time_updated = parser.getText();
						} else if (text == 'date_modified') {
							date_modified = parser.getText();
						} else if (text == 'sentence') {
							sentence = parser.getText();
						} else if (text == 'correct') {
							correct = parser.getBooleanValue();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'tagged_phrases') {
							// tagged_phrases = arrayOfTagged_phrases_Z(parser);
						} else if (text == 'check_digit') {
							check_digit = parser.getIntegerValue();
						} else if (text == 'language') {
							language = parser.getText();
						} else if (text == 'license_info') {
							license_info = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Sentence_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Issuer {
		public Boolean live {get;set;}
		public String deprecated_by {get;set;}
		public String deprecation_notes {get;set;}
		public String time_created {get;set;}
		public String date_added {get;set;}
		public String time_updated {get;set;}
		public String date_modified {get;set;}
		public String language {get;set;}
		public String license_info {get;set;}
		public String category {get;set;}
		public String document_type {get;set;}
		public String name {get;set;}
		public String url {get;set;}
		public String sub_directory {get;set;}
		public Integer id {get;set;}
		public Sentence issuer_top_level {get;set;}
		public Integer check_digit {get;set;}

		public Issuer(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'live') {
							live = parser.getBooleanValue();
						} else if (text == 'deprecated_by') {
							deprecated_by = parser.getText();
						} else if (text == 'deprecation_notes') {
							deprecation_notes = parser.getText();
						} else if (text == 'time_created') {
							time_created = parser.getText();
						} else if (text == 'date_added') {
							date_added = parser.getText();
						} else if (text == 'time_updated') {
							time_updated = parser.getText();
						} else if (text == 'date_modified') {
							date_modified = parser.getText();
						} else if (text == 'language') {
							language = parser.getText();
						} else if (text == 'license_info') {
							license_info = parser.getText();
						} else if (text == 'category') {
							category = parser.getText();
						} else if (text == 'document_type') {
							document_type = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else if (text == 'sub_directory') {
							sub_directory = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'issuer_top_level') {
							issuer_top_level = new Sentence(parser);
						} else if (text == 'check_digit') {
							check_digit = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Issuer consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Sentence_Z {
		public Boolean live {get;set;}
		public String time_created {get;set;}
		public String date_added {get;set;}
		public String time_updated {get;set;}
		public String date_modified {get;set;}
		public String sentence {get;set;}
		public Boolean correct {get;set;}
		public Integer id {get;set;}
		// public List<Tagged_phrases> tagged_phrases {get;set;}
		public Integer check_digit {get;set;}
		public String language {get;set;}
		public String license_info {get;set;}

		public Sentence_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'live') {
							live = parser.getBooleanValue();
						} else if (text == 'time_created') {
							time_created = parser.getText();
						} else if (text == 'date_added') {
							date_added = parser.getText();
						} else if (text == 'time_updated') {
							time_updated = parser.getText();
						} else if (text == 'date_modified') {
							date_modified = parser.getText();
						} else if (text == 'sentence') {
							sentence = parser.getText();
						} else if (text == 'correct') {
							correct = parser.getBooleanValue();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'tagged_phrases') {
							//tagged_phrases = arrayOfTagged_phrases(parser);
						} else if (text == 'check_digit') {
							check_digit = parser.getIntegerValue();
						} else if (text == 'language') {
							language = parser.getText();
						} else if (text == 'license_info') {
							license_info = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Sentence_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public Boolean live {get;set;}
	public String deprecated_by {get;set;}
	public String deprecation_notes {get;set;}
	public String time_created {get;set;}
	public String date_added {get;set;}
	public String time_updated {get;set;}
	public String date_modified {get;set;}
	public String language {get;set;}
	public String license_info {get;set;}
	public Integer sort_value {get;set;}
	public String genealogy {get;set;}
	public String sort_id {get;set;}
	public String common_name {get;set;}
	public String published_name {get;set;}
	public String published_version {get;set;}
	public String official_name {get;set;}
	public String type {get;set;}
	public String url {get;set;}
	public String description {get;set;}
	public String title_type {get;set;}
	public String availability {get;set;}
	public String parent_category {get;set;}
	public String originator {get;set;}
	public String status {get;set;}
	public String effective_date {get;set;}
	public String release_date {get;set;}
	public String release_availability {get;set;}
	public String price {get;set;}
	public String citation_format {get;set;}
	public String tab_category {get;set;}
	public String will_supercede_id {get;set;}
	public String subject_matter {get;set;}
	public String request_id {get;set;}
	public Integer id {get;set;}
	public List<Citations> citations {get;set;}
	public List<Term> common_names {get;set;}
	public Issuer issuer {get;set;}
	public Authority_document parent {get;set;}
	public Authority_document term {get;set;}
	public String cch_account {get;set;}
	public String x_href {get;set;} // in json: _href
	public Integer check_digit {get;set;}
	public Integer unique_citations {get;set;}

	public DeserialiseAuthorityDocResponse(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'live') {
						live = parser.getBooleanValue();
					} else if (text == 'deprecated_by') {
						deprecated_by = parser.getText();
					} else if (text == 'deprecation_notes') {
						deprecation_notes = parser.getText();
					} else if (text == 'time_created') {
						time_created = parser.getText();
					} else if (text == 'date_added') {
						date_added = parser.getText();
					} else if (text == 'time_updated') {
						time_updated = parser.getText();
					} else if (text == 'date_modified') {
						date_modified = parser.getText();
					} else if (text == 'language') {
						language = parser.getText();
					} else if (text == 'license_info') {
						license_info = parser.getText();
					} else if (text == 'sort_value') {
						sort_value = parser.getIntegerValue();
					} else if (text == 'genealogy') {
						genealogy = parser.getText();
					} else if (text == 'sort_id') {
						sort_id = parser.getText();
					} else if (text == 'common_name') {
						common_name = parser.getText();
					} else if (text == 'published_name') {
						published_name = parser.getText();
					} else if (text == 'published_version') {
						published_version = parser.getText();
					} else if (text == 'official_name') {
						official_name = parser.getText();
					} else if (text == 'type') {
						type = parser.getText();
					} else if (text == 'url') {
						url = parser.getText();
					} else if (text == 'description') {
						description = parser.getText();
					} else if (text == 'title_type') {
						title_type = parser.getText();
					} else if (text == 'availability') {
						availability = parser.getText();
					} else if (text == 'parent_category') {
						parent_category = parser.getText();
					} else if (text == 'originator') {
						originator = parser.getText();
					} else if (text == 'status') {
						status = parser.getText();
					} else if (text == 'effective_date') {
						effective_date = parser.getText();
					} else if (text == 'release_date') {
						release_date = parser.getText();
					} else if (text == 'release_availability') {
						release_availability = parser.getText();
					} else if (text == 'price') {
						price = parser.getText();
					} else if (text == 'citation_format') {
						citation_format = parser.getText();
					} else if (text == 'tab_category') {
						tab_category = parser.getText();
					} else if (text == 'will_supercede_id') {
						will_supercede_id = parser.getText();
					} else if (text == 'subject_matter') {
						subject_matter = parser.getText();
					} else if (text == 'request_id') {
						request_id = parser.getText();
					} else if (text == 'id') {
						id = parser.getIntegerValue();
					} else if (text == 'citations') {
						citations = arrayOfCitations(parser);
					} else if (text == 'common_names') {
						common_names = arrayOfTerm(parser);
					} else if (text == 'issuer') {
						issuer = new Issuer(parser);
					} else if (text == 'parent') {
						parent = new Authority_document(parser);
					} else if (text == 'term') {
						term = new Authority_document(parser);
					} else if (text == 'cch_account') {
						cch_account = parser.getText();
					} else if (text == '_href') {
						x_href = parser.getText();
					} else if (text == 'check_digit') {
						check_digit = parser.getIntegerValue();
					} else if (text == 'unique_citations') {
						unique_citations = parser.getIntegerValue();
					} else {
						System.debug(LoggingLevel.WARN, 'DeserialiseAuthorityDocResponse consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}

	public class Definition {
		public Boolean live {get;set;}
		public String deprecated_by {get;set;}
		public String deprecation_notes {get;set;}
		public String time_created {get;set;}
		public String date_added {get;set;}
		public String time_updated {get;set;}
		public String date_modified {get;set;}
		public String definition {get;set;}
		public List<Sources> sources {get;set;}
		public String project_id {get;set;}
		public Integer id {get;set;}
		public Sentence word_type {get;set;}
		public String other_form {get;set;}
		public Integer check_digit {get;set;}
		public String language {get;set;}
		public String license_info {get;set;}

		public Definition(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'live') {
							live = parser.getBooleanValue();
						} else if (text == 'deprecated_by') {
							deprecated_by = parser.getText();
						} else if (text == 'deprecation_notes') {
							deprecation_notes = parser.getText();
						} else if (text == 'time_created') {
							time_created = parser.getText();
						} else if (text == 'date_added') {
							date_added = parser.getText();
						} else if (text == 'time_updated') {
							time_updated = parser.getText();
						} else if (text == 'date_modified') {
							date_modified = parser.getText();
						} else if (text == 'definition') {
							definition = parser.getText();
						} else if (text == 'sources') {
							sources = arrayOfSources(parser);
						} else if (text == 'project_id') {
							project_id = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'word_type') {
							word_type = new Sentence(parser);
						} else if (text == 'other_form') {
							other_form = parser.getText();
						} else if (text == 'check_digit') {
							check_digit = parser.getIntegerValue();
						} else if (text == 'language') {
							language = parser.getText();
						} else if (text == 'license_info') {
							license_info = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Definition consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Term {
		public Boolean live {get;set;}
		public String deprecated_by {get;set;}
		public String deprecation_notes {get;set;}
		public String time_created {get;set;}
		public String date_added {get;set;}
		public String time_updated {get;set;}
		public String date_modified {get;set;}
		public String language {get;set;}
		public String license_info {get;set;}
		public String name {get;set;}
		public String stripped_name {get;set;}
		public Boolean nonstandard {get;set;}
		public String project_id {get;set;}
		public Integer id {get;set;}
		public String preferred_term {get;set;}
		public String x_href {get;set;} // in json: _href
		public Integer check_digit {get;set;}

		public Term(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'live') {
							live = parser.getBooleanValue();
						} else if (text == 'deprecated_by') {
							deprecated_by = parser.getText();
						} else if (text == 'deprecation_notes') {
							deprecation_notes = parser.getText();
						} else if (text == 'time_created') {
							time_created = parser.getText();
						} else if (text == 'date_added') {
							date_added = parser.getText();
						} else if (text == 'time_updated') {
							time_updated = parser.getText();
						} else if (text == 'date_modified') {
							date_modified = parser.getText();
						} else if (text == 'language') {
							language = parser.getText();
						} else if (text == 'license_info') {
							license_info = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'stripped_name') {
							stripped_name = parser.getText();
						} else if (text == 'nonstandard') {
							nonstandard = parser.getBooleanValue();
						} else if (text == 'project_id') {
							project_id = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'preferred_term') {
							preferred_term = parser.getText();
						} else if (text == '_href') {
							x_href = parser.getText();
						} else if (text == 'check_digit') {
							check_digit = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Term consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Sources {

		public Sources(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Sources consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Type {
		public Boolean live {get;set;}
		public String time_created {get;set;}
		public String date_added {get;set;}
		public String time_updated {get;set;}
		public String date_modified {get;set;}
		public String name {get;set;}
		public Integer id {get;set;}
		public Integer check_digit {get;set;}
		public String language {get;set;}
		public String license_info {get;set;}

		public Type(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'live') {
							live = parser.getBooleanValue();
						} else if (text == 'time_created') {
							time_created = parser.getText();
						} else if (text == 'date_added') {
							date_added = parser.getText();
						} else if (text == 'time_updated') {
							time_updated = parser.getText();
						} else if (text == 'date_modified') {
							date_modified = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'check_digit') {
							check_digit = parser.getIntegerValue();
						} else if (text == 'language') {
							language = parser.getText();
						} else if (text == 'license_info') {
							license_info = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Type consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Definition_Z {
		public Boolean live {get;set;}
		public String deprecated_by {get;set;}
		public String deprecation_notes {get;set;}
		public String time_created {get;set;}
		public String date_added {get;set;}
		public String time_updated {get;set;}
		public String date_modified {get;set;}
		public String definition {get;set;}
		public List<String> sources {get;set;}
		public String project_id {get;set;}
		public Integer id {get;set;}
		public Sentence word_type {get;set;}
		public String other_form {get;set;}
		public Integer check_digit {get;set;}
		public String language {get;set;}
		public String license_info {get;set;}

		public Definition_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'live') {
							live = parser.getBooleanValue();
						} else if (text == 'deprecated_by') {
							deprecated_by = parser.getText();
						} else if (text == 'deprecation_notes') {
							deprecation_notes = parser.getText();
						} else if (text == 'time_created') {
							time_created = parser.getText();
						} else if (text == 'date_added') {
							date_added = parser.getText();
						} else if (text == 'time_updated') {
							time_updated = parser.getText();
						} else if (text == 'date_modified') {
							date_modified = parser.getText();
						} else if (text == 'definition') {
							definition = parser.getText();
						} else if (text == 'sources') {
							sources = arrayOfString(parser);
						} else if (text == 'project_id') {
							project_id = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'word_type') {
							word_type = new Sentence(parser);
						} else if (text == 'other_form') {
							other_form = parser.getText();
						} else if (text == 'check_digit') {
							check_digit = parser.getIntegerValue();
						} else if (text == 'language') {
							language = parser.getText();
						} else if (text == 'license_info') {
							license_info = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Definition_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Control {
		public Boolean live {get;set;}
		public String deprecated_by {get;set;}
		public String deprecation_notes {get;set;}
		public String time_created {get;set;}
		public String date_added {get;set;}
		public String time_updated {get;set;}
		public String date_modified {get;set;}
		public String language {get;set;}
		public String license_info {get;set;}
		public Integer sort_value {get;set;}
		public String genealogy {get;set;}
		public String sort_id {get;set;}
		public String name {get;set;}
		public String impact_zone {get;set;}
		public String type {get;set;}
		public String classification {get;set;}
		public String metric_name {get;set;}
		public String metric_calculation {get;set;}
		public String metric_information_source {get;set;}
		public String metric_target_result {get;set;}
		public String metric_presentation_format {get;set;}
		public String metric_image_reference {get;set;}
		public String project_id {get;set;}
		public Integer id {get;set;}
		public Sentence_Z sentence {get;set;}
		public Authority_document parent {get;set;}
		public String x_href {get;set;} // in json: _href
		public Integer check_digit {get;set;}

		public Control(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'live') {
							live = parser.getBooleanValue();
						} else if (text == 'deprecated_by') {
							deprecated_by = parser.getText();
						} else if (text == 'deprecation_notes') {
							deprecation_notes = parser.getText();
						} else if (text == 'time_created') {
							time_created = parser.getText();
						} else if (text == 'date_added') {
							date_added = parser.getText();
						} else if (text == 'time_updated') {
							time_updated = parser.getText();
						} else if (text == 'date_modified') {
							date_modified = parser.getText();
						} else if (text == 'language') {
							language = parser.getText();
						} else if (text == 'license_info') {
							license_info = parser.getText();
						} else if (text == 'sort_value') {
							sort_value = parser.getIntegerValue();
						} else if (text == 'genealogy') {
							genealogy = parser.getText();
						} else if (text == 'sort_id') {
							sort_id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'impact_zone') {
							impact_zone = parser.getText();
						} else if (text == 'type') {
							type = parser.getText();
						} else if (text == 'classification') {
							classification = parser.getText();
						} else if (text == 'metric_name') {
							metric_name = parser.getText();
						} else if (text == 'metric_calculation') {
							metric_calculation = parser.getText();
						} else if (text == 'metric_information_source') {
							metric_information_source = parser.getText();
						} else if (text == 'metric_target_result') {
							metric_target_result = parser.getText();
						} else if (text == 'metric_presentation_format') {
							metric_presentation_format = parser.getText();
						} else if (text == 'metric_image_reference') {
							metric_image_reference = parser.getText();
						} else if (text == 'project_id') {
							project_id = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'sentence') {
							sentence = new Sentence_Z(parser);
						} else if (text == 'parent') {
							parent = new Authority_document(parser);
						} else if (text == '_href') {
							x_href = parser.getText();
						} else if (text == 'check_digit') {
							check_digit = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Control consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Authority_document {
		public Integer id {get;set;}
		public String x_href {get;set;} // in json: _href

		public Authority_document(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == '_href') {
							x_href = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Authority_document consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Sentence {
		public Integer id {get;set;}

		public Sentence(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Sentence consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Citations {
		public Boolean live {get;set;}
		public String deprecated_by {get;set;}
		public String deprecation_notes {get;set;}
		public String time_created {get;set;}
		public String date_added {get;set;}
		public String time_updated {get;set;}
		public String date_modified {get;set;}
		public String language {get;set;}
		public String license_info {get;set;}
		public String sort_value {get;set;}
		public String genealogy {get;set;}
		public String sort_id {get;set;}
		public String reference {get;set;}
		public String guidance {get;set;}
		public String guidance_as_tagged {get;set;}
		public Boolean is_audit_question {get;set;}
		public Integer id {get;set;}
		public Authority_document authority_document {get;set;}
		public Control control {get;set;}
		public String audit_item {get;set;}
		public String asset {get;set;}
		public String compliance_document {get;set;}
		public String role {get;set;}
		public String data_content {get;set;}
		public String organizational_function {get;set;}
		public String record_example {get;set;}
		public String metric {get;set;}
		public String monitored_event {get;set;}
		public String organizational_task {get;set;}
		public String record_category {get;set;}
		public String configurable_item_with_settings {get;set;}
		public String sentence {get;set;}
		public String parent {get;set;}
		public Integer check_digit {get;set;}

		public Citations(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'live') {
							live = parser.getBooleanValue();
						} else if (text == 'deprecated_by') {
							deprecated_by = parser.getText();
						} else if (text == 'deprecation_notes') {
							deprecation_notes = parser.getText();
						} else if (text == 'time_created') {
							time_created = parser.getText();
						} else if (text == 'date_added') {
							date_added = parser.getText();
						} else if (text == 'time_updated') {
							time_updated = parser.getText();
						} else if (text == 'date_modified') {
							date_modified = parser.getText();
						} else if (text == 'language') {
							language = parser.getText();
						} else if (text == 'license_info') {
							license_info = parser.getText();
						} else if (text == 'sort_value') {
							sort_value = parser.getText();
						} else if (text == 'genealogy') {
							genealogy = parser.getText();
						} else if (text == 'sort_id') {
							sort_id = parser.getText();
						} else if (text == 'reference') {
							reference = parser.getText();
						} else if (text == 'guidance') {
							guidance = parser.getText();
						} else if (text == 'guidance_as_tagged') {
							guidance_as_tagged = parser.getText();
						} else if (text == 'is_audit_question') {
							is_audit_question = parser.getBooleanValue();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'authority_document') {
							authority_document = new Authority_document(parser);
						} else if (text == 'control') {
							control = new Control(parser);
						} else if (text == 'audit_item') {
							audit_item = parser.getText();
						} else if (text == 'asset') {
							asset = parser.getText();
						} else if (text == 'compliance_document') {
							compliance_document = parser.getText();
						} else if (text == 'role') {
							role = parser.getText();
						} else if (text == 'data_content') {
							data_content = parser.getText();
						} else if (text == 'organizational_function') {
							organizational_function = parser.getText();
						} else if (text == 'record_example') {
							record_example = parser.getText();
						} else if (text == 'metric') {
							metric = parser.getText();
						} else if (text == 'monitored_event') {
							monitored_event = parser.getText();
						} else if (text == 'organizational_task') {
							organizational_task = parser.getText();
						} else if (text == 'record_category') {
							record_category = parser.getText();
						} else if (text == 'configurable_item_with_settings') {
							configurable_item_with_settings = parser.getText();
						} else if (text == 'sentence') {
							sentence = parser.getText();
						} else if (text == 'parent') {
							parent = parser.getText();
						} else if (text == 'check_digit') {
							check_digit = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Citations consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Control_Z {
		public Boolean live {get;set;}
		public String deprecated_by {get;set;}
		public String deprecation_notes {get;set;}
		public String time_created {get;set;}
		public String date_added {get;set;}
		public String time_updated {get;set;}
		public String date_modified {get;set;}
		public String language {get;set;}
		public String license_info {get;set;}
		public Integer sort_value {get;set;}
		public String genealogy {get;set;}
		public String sort_id {get;set;}
		public String name {get;set;}
		public String impact_zone {get;set;}
		public String type {get;set;}
		public String classification {get;set;}
		public String metric_name {get;set;}
		public String metric_calculation {get;set;}
		public String metric_information_source {get;set;}
		public String metric_target_result {get;set;}
		public String metric_presentation_format {get;set;}
		public String metric_image_reference {get;set;}
		public String project_id {get;set;}
		public Integer id {get;set;}
		public Sentence_Y sentence {get;set;}
		public Authority_document parent {get;set;}
		public String x_href {get;set;} // in json: _href
		public Integer check_digit {get;set;}

		public Control_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'live') {
							live = parser.getBooleanValue();
						} else if (text == 'deprecated_by') {
							deprecated_by = parser.getText();
						} else if (text == 'deprecation_notes') {
							deprecation_notes = parser.getText();
						} else if (text == 'time_created') {
							time_created = parser.getText();
						} else if (text == 'date_added') {
							date_added = parser.getText();
						} else if (text == 'time_updated') {
							time_updated = parser.getText();
						} else if (text == 'date_modified') {
							date_modified = parser.getText();
						} else if (text == 'language') {
							language = parser.getText();
						} else if (text == 'license_info') {
							license_info = parser.getText();
						} else if (text == 'sort_value') {
							sort_value = parser.getIntegerValue();
						} else if (text == 'genealogy') {
							genealogy = parser.getText();
						} else if (text == 'sort_id') {
							sort_id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'impact_zone') {
							impact_zone = parser.getText();
						} else if (text == 'type') {
							type = parser.getText();
						} else if (text == 'classification') {
							classification = parser.getText();
						} else if (text == 'metric_name') {
							metric_name = parser.getText();
						} else if (text == 'metric_calculation') {
							metric_calculation = parser.getText();
						} else if (text == 'metric_information_source') {
							metric_information_source = parser.getText();
						} else if (text == 'metric_target_result') {
							metric_target_result = parser.getText();
						} else if (text == 'metric_presentation_format') {
							metric_presentation_format = parser.getText();
						} else if (text == 'metric_image_reference') {
							metric_image_reference = parser.getText();
						} else if (text == 'project_id') {
							project_id = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'sentence') {
							sentence = new Sentence_Y(parser);
						} else if (text == 'parent') {
							parent = new Authority_document(parser);
						} else if (text == '_href') {
							x_href = parser.getText();
						} else if (text == 'check_digit') {
							check_digit = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Control_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Tagged_phrases_Z {
		public Boolean live {get;set;}
		public String time_created {get;set;}
		public String date_added {get;set;}
		public String time_updated {get;set;}
		public String date_modified {get;set;}
		public Integer start {get;set;}
		public Integer end_Z {get;set;} // in json: end
		public Boolean nonstandard {get;set;}
		public Integer id {get;set;}
		public Sentence sentence {get;set;}
		public Type type {get;set;}
		public Term term {get;set;}
		public Definition_Z definition {get;set;}
		public Integer check_digit {get;set;}
		public String language {get;set;}
		public String license_info {get;set;}

		public Tagged_phrases_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'live') {
							live = parser.getBooleanValue();
						} else if (text == 'time_created') {
							time_created = parser.getText();
						} else if (text == 'date_added') {
							date_added = parser.getText();
						} else if (text == 'time_updated') {
							time_updated = parser.getText();
						} else if (text == 'date_modified') {
							date_modified = parser.getText();
						} else if (text == 'start') {
							start = parser.getIntegerValue();
						} else if (text == 'end') {
							end_Z = parser.getIntegerValue();
						} else if (text == 'nonstandard') {
							nonstandard = parser.getBooleanValue();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'sentence') {
							sentence = new Sentence(parser);
						} else if (text == 'type') {
							type = new Type(parser);
						} else if (text == 'term') {
							term = new Term(parser);
						} else if (text == 'definition') {
							definition = new Definition_Z(parser);
						} else if (text == 'check_digit') {
							check_digit = parser.getIntegerValue();
						} else if (text == 'language') {
							language = parser.getText();
						} else if (text == 'license_info') {
							license_info = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Tagged_phrases_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public static DeserialiseAuthorityDocResponse parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new DeserialiseAuthorityDocResponse(parser);
	}

	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT ||
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}

    // private static List<Tagged_phrases> arrayOfTagged_phrases(System.JSONParser p) {
    //     List<Tagged_phrases> res = new List<Tagged_phrases>();
    //     if (p.getCurrentToken() == null) p.nextToken();
    //     while (p.nextToken() != System.JSONToken.END_ARRAY) {
    //         res.add(new Tagged_phrases(p));
    //     }
    //     return res;
    // }


    private static List<Term> arrayOfTerm(System.JSONParser p) {
        List<Term> res = new List<Term>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Term(p));
        }
        return res;
    }

    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }


    private static List<Sources> arrayOfSources(System.JSONParser p) {
        List<Sources> res = new List<Sources>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Sources(p));
        }
        return res;
    }

    private static List<Citations> arrayOfCitations(System.JSONParser p) {
        List<Citations> res = new List<Citations>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Citations(p));
        }
        return res;
    }

    // private static List<Tagged_phrases_Z> arrayOfTagged_phrases_Z(System.JSONParser p) {
    //     List<Tagged_phrases_Z> res = new List<Tagged_phrases_Z>();
    //     if (p.getCurrentToken() == null) p.nextToken();
    //     while (p.nextToken() != System.JSONToken.END_ARRAY) {
    //         res.add(new Tagged_phrases_Z(p));
    //     }
    //     return res;
    // }

}