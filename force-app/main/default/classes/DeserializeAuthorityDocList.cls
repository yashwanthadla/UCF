//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class DeserializeAuthorityDocList {

	public class Issuer {
		public Integer id {get;set;}
		public String x_href {get;set;} // in json: _href

		public Issuer(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == '_href') {
							x_href = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Issuer consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Children {
		public String x_href {get;set;} // in json: _href

		public Children(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '_href') {
							x_href = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Children consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public Integer id {get;set;}
	public Boolean live {get;set;}
	public String deprecated_by {get;set;}
	public String deprecation_notes {get;set;}
	public String time_created {get;set;}
	public String date_added {get;set;}
	public String time_updated {get;set;}
	public String date_modified {get;set;}
	public String language {get;set;}
	public String license_info {get;set;}
	public Integer sort_value {get;set;}
	public String common_name {get;set;}
	public String published_name {get;set;}
	public String published_version {get;set;}
	public String official_name {get;set;}
	public String type {get;set;}
	public String url {get;set;}
	public String description {get;set;}
	public String title_type {get;set;}
	public String availability {get;set;}
	public String parent_category {get;set;}
	public String originator {get;set;}
	public String status {get;set;}
	public String AD_marked_deprecation {get;set;}
	public String effective_date {get;set;}
	public String release_date {get;set;}
	public String citation_format {get;set;}
	public String tab_category {get;set;}
	public String will_supercede_id {get;set;}
	public String subject_matter {get;set;}
	public String request_id {get;set;}
	public String genealogy {get;set;}
	public String sort_id {get;set;}
	public String release_availability {get;set;}
	public String price {get;set;}
	public Children children {get;set;}
	public Children terms {get;set;}
	public Children citations {get;set;}
	public Children subject_matters {get;set;}
	public Children common_names {get;set;}
	public Issuer issuer {get;set;}
	public Issuer parent {get;set;}
	public Issuer term {get;set;}
	public String cch_account {get;set;}
	public String x_href {get;set;} // in json: _href
	public Integer check_digit {get;set;}

	public DeserializeAuthorityDocList(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'id') {
						id = parser.getIntegerValue();
					} else if (text == 'live') {
						live = parser.getBooleanValue();
					} else if (text == 'deprecated_by') {
						deprecated_by = parser.getText();
					} else if (text == 'deprecation_notes') {
						deprecation_notes = parser.getText();
					} else if (text == 'time_created') {
						time_created = parser.getText();
					} else if (text == 'date_added') {
						date_added = parser.getText();
					} else if (text == 'time_updated') {
						time_updated = parser.getText();
					} else if (text == 'date_modified') {
						date_modified = parser.getText();
					} else if (text == 'language') {
						language = parser.getText();
					} else if (text == 'license_info') {
						license_info = parser.getText();
					} else if (text == 'sort_value') {
						sort_value = parser.getIntegerValue();
					} else if (text == 'common_name') {
						common_name = parser.getText();
					} else if (text == 'published_name') {
						published_name = parser.getText();
					} else if (text == 'published_version') {
						published_version = parser.getText();
					} else if (text == 'official_name') {
						official_name = parser.getText();
					} else if (text == 'type') {
						type = parser.getText();
					} else if (text == 'url') {
						url = parser.getText();
					} else if (text == 'description') {
						description = parser.getText();
					} else if (text == 'title_type') {
						title_type = parser.getText();
					} else if (text == 'availability') {
						availability = parser.getText();
					} else if (text == 'parent_category') {
						parent_category = parser.getText();
					} else if (text == 'originator') {
						originator = parser.getText();
					} else if (text == 'status') {
						status = parser.getText();
					} else if (text == 'AD_marked_deprecation') {
						AD_marked_deprecation = parser.getText();
					} else if (text == 'effective_date') {
						effective_date = parser.getText();
					} else if (text == 'release_date') {
						release_date = parser.getText();
					} else if (text == 'citation_format') {
						citation_format = parser.getText();
					} else if (text == 'tab_category') {
						tab_category = parser.getText();
					} else if (text == 'will_supercede_id') {
						will_supercede_id = parser.getText();
					} else if (text == 'subject_matter') {
						subject_matter = parser.getText();
					} else if (text == 'request_id') {
						request_id = parser.getText();
					} else if (text == 'genealogy') {
						genealogy = parser.getText();
					} else if (text == 'sort_id') {
						sort_id = parser.getText();
					} else if (text == 'release_availability') {
						release_availability = parser.getText();
					} else if (text == 'price') {
						price = parser.getText();
					} else if (text == 'children') {
						children = new Children(parser);
					} else if (text == 'terms') {
						terms = new Children(parser);
					} else if (text == 'citations') {
						citations = new Children(parser);
					} else if (text == 'subject_matters') {
						subject_matters = new Children(parser);
					} else if (text == 'common_names') {
						common_names = new Children(parser);
					} else if (text == 'issuer') {
						issuer = new Issuer(parser);
					} else if (text == 'parent') {
						parent = new Issuer(parser);
					} else if (text == 'term') {
						term = new Issuer(parser);
					} else if (text == 'cch_account') {
						cch_account = parser.getText();
					} else if (text == '_href') {
						x_href = parser.getText();
					} else if (text == 'check_digit') {
						check_digit = parser.getIntegerValue();
					} else {
						System.debug(LoggingLevel.WARN, 'DeserializeAuthorityDocList consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}

	public static List<DeserializeAuthorityDocList> parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return arrayOfDeserializeAuthorityDocList(parser);
	}

	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT ||
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}

    private static List<DeserializeAuthorityDocList> arrayOfDeserializeAuthorityDocList(System.JSONParser p) {
        List<DeserializeAuthorityDocList> res = new List<DeserializeAuthorityDocList>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new DeserializeAuthorityDocList(p));
        }
        return res;
    }
}